#!/bin/bash

# shoeshine
# Prepare a cryoSPARC job for Bayesian polishing in Relion.
# original code by Andreas U Mueller - 2022
# --- no warranty, no liability; use at own risk ---
#
#####
#
# Version history:
#
# v0.3 - 20230924
#  - updated file pattern matching to include CS4 files
#  - included UID removal for Relion MotionCor job path
#
# v0.2 - 20220802
#  - restricted MotionCorr job find to top level folder
#  - CS refinement job links for last iteration only
#
# v0.1 - 20220515
#  - initial
#
#

version="shoeshine - v0.3"

export LC_ALL=C # fix locale setting for consistent sort
SECONDS=0

# abort on error
set -e


function mrcs_rename (){
    # change to folder and renames mrc to mrcs files
    curr_dir=$(pwd)
    cd "$1"
    for f in *.mrc; do mv -- "$f" "${f%.mrc}.mrcs"; done
    cd "$curr_dir"
}


# default values
rel_rename="TRUE"
still="FALSE"
overwrite="FALSE"
keeporistar="FALSE"

hlpmsg="$version

Prepare a cryoSPARC job for Bayesian polishing in Relion.
original code by Andreas U Mueller - 2022

Requirements: pyem >= 20220427

Usage: shoeshine [options] cs_extract_job_folder cs_refinement_job_folder relion_project_folder

Relative paths will be converted to absolute.

Required arguments:
    cs_extract_job_folder        e.g. P2/J5
    cs_refinement_job_folder     e.g. P2/J17
    relion_project_folder
Optional arguments:
    -h            Print this message.
    -f            Overwrite exisiting folders and files.
    -k            Keep a copy of unmodified STAR file (*.star.ori).
    -M            Skip detection of Relion MotionCorr job.
                   (also skips path correction in output STAR file)
    -R            Do not rename half map links to Relion convention.
    -x \"--arg1 --arg2 ...\"  Arguments for csparc2star.py
"

# parse arguments
while getopts ":hfkMRx:" opt; do
  case ${opt} in
    h )
      printf '%b\n' "$hlpmsg"
      exit 0
      ;;
    f )
      overwrite="TRUE"
      ;;
    k )
      keeporistar="TRUE"
      ;;
    M )
      still="TRUE"
      ;;
    R )
      # do not rename half map links to relion naming
      rel_rename="FALSE"
      ;;
    x )
      csparc2star_opt="$OPTARG"
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      ;;
  esac
done
shift $((OPTIND -1))

# csparc2star/pyem version available?
bin_csparc2star="$(which csparc2star.py)"

if [ -z "$bin_csparc2star" ]; then
    echo "Error: Cannot find csparc2star.py script. Please make sure to have pyem installed and added to your PATH."
    exit 1
fi

# parse positional arguments
ptcdir="$1"
csrdir="$2"
reldir="$3"

# check if proper folders
echo "Checking paths..."
for d in "$csrdir" "$ptcdir" "$reldir"; do
    echo "$d"
    if [ -z "$d" ] || ! [ -d "$d" ]; then
        echo "Error: Input folder not recognized."
        exit 1
    fi
done

# convert to absolute paths
ptcdir="$(realpath $ptcdir)"
csrdir="$(realpath $csrdir)"
reldir="$(realpath $reldir)"

# check if refinement folder contains particle data
rdir_pcs=($(find "$csrdir" -name *_???_particles.cs | sort -r))
if [ -z ${rdir_pcs[0]} ]; then
    echo "Error: Cannot find particles in cryoSPARC refinement job folder."
    printf '%b\n' "$hlpmsg"
    exit 1
fi

# check if proper extract job
xdir_pcs=($(find "$ptcdir" -name extracted_particles.cs | sort -r))
if [ -z ${xdir_pcs[0]} ]; then
    echo "Error: Cannot identify cryoSPARC extract job folder."
    printf '%b\n' "$hlpmsg"
    exit 1
fi


### execution
# create cryoSPARC scaffolds in relion folder
# extract job
csxjob=$(basename "$ptcdir")
rel_xdir="$reldir/$csxjob/extract"

if ! [ -d "$rel_xdir" ]; then
    mkdir -p "$rel_xdir"
    #ln -s "$ptcdir/extract/"*.mrc -t "$rel_xdir/."
    for extract_mrc in $ptcdir/extract/*;do ln -s "$extract_mrc" -t "$rel_xdir/.";done
        mrcs_rename "$rel_xdir"
else
    echo "Extract job link folder $rel_xdir exists already."
    if [ $overwrite = TRUE ]; then
        echo "Overwriting..."
        #ln -sf "$ptcdir/extract/"*.mrc -t "$rel_xdir/."
        for extract_mrc in  $ptcdir/extract/*;do ln -sf "$extract_mrc" -t "$rel_xdir/.";done
            mrcs_rename "$rel_xdir"
    else
        echo "Skipping..."
    fi
fi

# CS refinement job
csrjob=$(basename "$csrdir")
rel_rdir="$reldir/$csrjob"

# determine max iteration of CS job
csr_max_iter=($(find "$csrdir/" -name *_???_volume_map.mrc | sort -r))
IFS='_' read -ra csr_max_iter_split <<< "$(basename ${csr_max_iter[0]})"
csr_max_iter_num=${csr_max_iter_split[1]}
echo "Maximum iteration of refinement job $csrjob is $csr_max_iter_num"

if ! [ -d "$rel_rdir" ]; then
    mkdir -p "$rel_rdir"
    # make symbolic links
    #ln -s "$csrdir/"* -t "$rel_rdir/."; # symbolic links to everything; legacy
    ln -s $(find "$csrdir/" -name *_${csr_max_iter_num}_*) -t "$rel_rdir/."
    ln -s $(find "$csrdir/" -name *_passthrough*) -t "$rel_rdir/."
else
    echo "Refinement job link folder $rel_rdir exists already."
    if [ $overwrite = TRUE ]; then
        echo "Overwriting..."
        #ln -sf "$csrdir/"* -t "$rel_rdir/."
        ln -sf $(find "$csrdir/" -name *_${csr_max_iter_num}_*) -t "$rel_rdir/."
        ln -sf $(find "$csrdir/" -name *_passthrough*) -t "$rel_rdir/."
    else
        echo "Skipping refinement job file linking..."
    fi
fi

# locate MotionCorr job in Relion
# currently formulates MotionCorr job paths as relative; absolute version in comments
mcjob_path=""
if [ -d "$reldir/MotionCorr" ]; then
    mcjob_folders=($(find "$reldir/MotionCorr" -maxdepth 1 -name job* -exec basename {} + ))
    if [ ${#mcjob_folders[@]} -gt 1 ]; then
        echo "Found multiple MotionCorr jobs. Please select:"
        select mcjob in ${mcjob_folders[@]}; do
           mcjob_path="MotionCorr/$mcjob"
           break
        done
    elif [ ${#mcjob_folders[@]} -eq 1 ]; then
        echo "Found a single MotionCorr job: ${mcjob_folders[0]}"
        mcjob_path="MotionCorr/${mcjob_folders[0]}"
    else
        echo "Warning: Could not locate MotionCorr jobs in $reldir/MotionCorr"
        echo "Make sure the paths are correct and a MotionCorr job exists."
        echo "Script will continue, but MotionCorr path in STAR file will not be adjusted."
        still="TRUE"
    fi
else
    echo "Warning: Folder $reldir/MotionCorr does not exist."
    echo "Note: Bayesian polishing in Relion requires MotionCorr data from Relion to run."
    still="TRUE"
fi

# add image subfolder to MotionCorr directory
if ! [ -z mcjob_path ]; then
    mc_imdir=($(find "$reldir/$mcjob_path" -mindepth 1 -maxdepth 1 -type d))
    if [ ${#mc_imdir[@]} -gt 1 ]; then
        echo "Found multiple folders in MotionCorr job path that may contain images. Please select:"
        select mc_imfolder in ${mc_imdir[@]}; do
           mcjob_path="$(echo $mc_imfolder | sed 's/.*\(MotionCorr\)/\1/g')/"
           break
        done
    elif [ ${#mc_imdir[@]} -eq 1 ]; then
        mcjob_path="$(echo ${mc_imdir[0]} | sed 's/.*\(MotionCorr\)/\1/g')/"
        echo "Found a single image folder in MotionCorr job path: $mcjob_path"
    else
        echo "Warning: Could not locate MotionCorr images in $reldir/$mcjob_path"
        echo "Script will continue, but MotionCorr path in STAR file will NOT be adjusted."
        still="TRUE"
    fi
fi

# rename half map links to match Relion convention
if [ $rel_rename = TRUE ]; then
    mapA_files=($(find "$rel_rdir" -name *_half_A.mrc | sort -r))
    mapA=${mapA_files[0]}
    mapB_files=($(find "$rel_rdir" -name *_half_B.mrc | sort -r))
    mapB=${mapB_files[0]}
    echo "Renaming $mapA to ${mapA%_half_A.mrc}_half1_x_unfil.mrc"
    ! [ -z "$mapA" ] && mv -- "$mapA" "${mapA%_half_A.mrc}_half1_x_unfil.mrc"
    echo "Renaming $mapB to ${mapB%_half_B.mrc}_half2_x_unfil.mrc"
    ! [ -z "$mapB" ] && mv -- "$mapB" "${mapB%_half_B.mrc}_half2_x_unfil.mrc"
fi

# gather cs files
rel_rdir_pcs_files=($(find "$rel_rdir" -name *_???_particles.cs | sort -r))
rel_rdir_pcs=${rel_rdir_pcs_files[0]}
rel_rdir_ptpcs_files=($(find "$rel_rdir" -name *passthrough_particles.cs | sort -r))
rel_rdir_ptpcs=${rel_rdir_ptpcs_files[0]}

# convert to STAR file
finalstar="$rel_rdir/${csrjob}_particles_from_csparc.star"
if ! [ -f "$finalstar" ] || [ $overwrite = TRUE ]; then
    echo "Executing cs to star file conversion with the following command:"
    if [ $still = TRUE ]; then
        echo "csparc2star.py $csparc2star_opt $rel_rdir_pcs $rel_rdir_ptpcs $finalstar"
        csparc2star.py $csparc2star_opt "$rel_rdir_pcs" "$rel_rdir_ptpcs" "$finalstar"
        echo "WARNING: Micrograph paths were NOT changed."
    else
        echo "csparc2star.py $csparc2star_opt --micrograph-path $mcjob_path $rel_rdir_pcs $rel_rdir_ptpcs $finalstar"
        csparc2star.py $csparc2star_opt --micrograph-path "$mcjob_path" "$rel_rdir_pcs" "$rel_rdir_ptpcs" "$finalstar"
    fi
else
    echo "$finalstar exists already. Pass -f to force overwrite."
fi

# make backup of csparc2star output
if [ $keeporistar = "TRUE" ]; then
    cp "$finalstar" "${finalstar}.ori"
fi
# change mrc to mrcs in STAR file
sed -i "s/_particles.mrc/_particles.mrcs/g" "$finalstar"

# remove UID from MotionCorr path
sed -i "s/${mcjob_path//\//\\/}[[:digit:]]\{21\}_/${mcjob_path//\//\\/}/g" "$finalstar"

# inform user
echo "Converted cryoSPARC $csrjob to STAR file $finalstar."

wait

echo "Completed in $SECONDS seconds."
exit 0

exit 2

